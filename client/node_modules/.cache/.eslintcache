[{"/Users/crystal/Desktop/contact_management_project/client/src/index.js":"1","/Users/crystal/Desktop/contact_management_project/client/src/App.js":"2","/Users/crystal/Desktop/contact_management_project/client/src/reportWebVitals.js":"3","/Users/crystal/Desktop/contact_management_project/client/src/components/Layout.js":"4","/Users/crystal/Desktop/contact_management_project/client/src/components/Navbar.js":"5","/Users/crystal/Desktop/contact_management_project/client/src/pages/Home.js":"6","/Users/crystal/Desktop/contact_management_project/client/src/pages/Login.js":"7","/Users/crystal/Desktop/contact_management_project/client/src/context/ToastContext.js":"8","/Users/crystal/Desktop/contact_management_project/client/src/context/AuthContext.js":"9","/Users/crystal/Desktop/contact_management_project/client/src/pages/CreateContact.js":"10"},{"size":580,"mtime":1696344912287,"results":"11","hashOfConfig":"12"},{"size":771,"mtime":1696357874082,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1696316999138,"results":"14","hashOfConfig":"12"},{"size":223,"mtime":1696345050766,"results":"15","hashOfConfig":"12"},{"size":2422,"mtime":1696357950245,"results":"16","hashOfConfig":"12"},{"size":4248,"mtime":1696365628936,"results":"17","hashOfConfig":"12"},{"size":1900,"mtime":1696347147496,"results":"18","hashOfConfig":"12"},{"size":423,"mtime":1696346458560,"results":"19","hashOfConfig":"12"},{"size":2178,"mtime":1696354151023,"results":"20","hashOfConfig":"12"},{"size":3659,"mtime":1696364883961,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1jb61nh",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/crystal/Desktop/contact_management_project/client/src/index.js",[],[],["55"],"/Users/crystal/Desktop/contact_management_project/client/src/App.js",[],[],"/Users/crystal/Desktop/contact_management_project/client/src/reportWebVitals.js",[],[],"/Users/crystal/Desktop/contact_management_project/client/src/components/Layout.js",[],[],"/Users/crystal/Desktop/contact_management_project/client/src/components/Navbar.js",["56","57","58","59","60"],[],"/Users/crystal/Desktop/contact_management_project/client/src/pages/Home.js",["61","62","63","64"],[],"import React, { useContext, useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport AuthContext from \"../context/AuthContext\";\n\nconst Home = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user } = useContext(AuthContext);\n  const [loading, setLoading] = useState(false);\n  const [isNewContactAdded, setIsNewContactAdded] = useState(false);\n  const [contacts, setContacts] = useState([]);\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  useEffect(() => {\n    setLoading(true);\n    async function fetchData() {\n      try {\n        const res = await fetch(`http://localhost:3000/api/`);\n        const result = await res.json();\n        if (!result.error) {\n          setContacts(result.contacts);\n          setLoading(false);\n        } else {\n          console.log(result);\n          setLoading(false);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    fetchData(); // Call the fetchData function to load data initially\n  }, []);\n\n  useEffect(() => {\n    const { state } = location;\n    console.log(state);\n    if (state && state.newContact && !isNewContactAdded) {\n      // Add the new contact to the contacts list\n      setContacts((prevContacts) => [...prevContacts, state.newContact]);\n      setIsNewContactAdded(true); // Set the flag to true to prevent further updates\n    }\n  }, [location.state, isNewContactAdded]);\n\n  //TODO\n  // useEffect(() => {\n  //   !user && navigate(\"/login\", { replace: true });\n  // }, [user, navigate]);\n\n  const handleSearchSubmit = (event) => {\n    event.preventDefault();\n\n    const newSearchUser = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(searchInput.toLowerCase())\n    );\n    console.log(newSearchUser);\n    setContacts(newSearchUser);\n  };\n\n  return (\n    <>\n      <div className=\"table-responsive\">\n        <h1> Your Contacts</h1>\n\n        <a href=\"/\" className=\"btn btn-danger my-2\">\n          Reload Contact\n        </a>\n        <hr className=\"my-10\" />\n        <>\n          <form className=\"d-flex\" onSubmit={handleSearchSubmit}>\n            <input\n              type=\"text\"\n              name=\"searchInput\"\n              id=\"searchInput\"\n              className=\"form-control my-2\"\n              placeholder=\"Search Contact\"\n              value={searchInput}\n              onChange={(e) => setSearchInput(e.target.value)}\n            />\n            <button type=\"submit\" className=\"btn btn-info mx-2\">\n              Search\n            </button>\n          </form>\n\n          <p>\n            Your Total Contacts: <strong>{contacts.length}</strong>\n          </p>\n          <table className=\"table table-hover\">\n            <thead>\n              <tr classNmae=\"table-dark\" className=\"col-md-2\">\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Username</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Address</th>\n                <th scope=\"col\">Phone</th>\n                <th scope=\"col\">Website</th>\n                <th scope=\"col\">Company Name</th>\n                <th scope=\"col\">Company Catch Phrase</th>\n                <th scope=\"col\">Company Business Strategy</th>\n              </tr>\n            </thead>\n            <tbody>\n              {contacts.map((contact) => (\n                <tr key={contact.id}>\n                  <td>{contact.name}</td>\n                  <td>{contact.username}</td>\n                  <td>{contact.email}</td>\n                  <td>\n                    {contact.address.street}, {contact.address.suite},{\" \"}\n                    {contact.address.city}, {contact.address.zipcode}\n                  </td>\n                  <td>{contact.phone}</td>\n                  <td>\n                    <a href={contact.website}>{contact.website}</a>\n                  </td>\n                  <td>{contact.company.name}</td>\n                  <td>{contact.company.catchPhrase}</td>\n                  <td>{contact.company.bs}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </>\n      </div>\n\n      {/* Add this console.log statement */}\n      {console.log(\"Current contacts state:\", contacts)}\n    </>\n  );\n};\n\nexport default Home;\n","/Users/crystal/Desktop/contact_management_project/client/src/pages/Login.js",[],[],"/Users/crystal/Desktop/contact_management_project/client/src/context/ToastContext.js",[],[],"/Users/crystal/Desktop/contact_management_project/client/src/context/AuthContext.js",["65","66"],[],"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport ToastContext from \"./ToastContext\";\n\nconst AuthContext = createContext();\n\nexport const AuthContextProvider = ({ children }) => {\n  const { toast } = useContext(ToastContext);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [user, setUser] = useState(null);\n\n  // useEffect(() => {\n  //   checkUserLoggedIn();\n  // }, []);\n\n  // check if the user is logged in.\n  // const checkUserLoggedIn = async () => {\n  //   try {\n  //     const res = await fetch(`http://localhost:3000/api/me`, {\n  //       method: \"GET\",\n  //       headers: {\n  //         Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n  //       },\n  //     });\n  //     const result = await res.json();\n  //     if (!result.error) {\n  //       if (location.pathname === \"/login\") {\n  //         setTimeout(() => {\n  //           navigate(\"/\", { replace: true });\n  //         }, 500);\n  //       } else {\n  //         navigate(location.pathname ? location.pathname : \"/\");\n  //       }\n  //       setUser(result);\n  //     } else {\n  //       navigate(\"/login\", { replace: true });\n  //     }\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // };\n\n  // login request.\n  const loginUser = async (userData) => {\n    try {\n      const res = await fetch(`http://localhost:3000/api/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ ...userData }),\n      });\n\n      const result = await res.json();\n\n      if (!result.error) {\n        localStorage.setItem(\"token\", result.token);\n        setUser(result.user);\n        toast.success(`Logged in ${result.user.name} successfully`);\n        navigate(\"/\", { replace: true });\n      } else {\n        toast.error(result.error);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ loginUser, user, setUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n","/Users/crystal/Desktop/contact_management_project/client/src/pages/CreateContact.js",["67"],[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":15,"column":11,"nodeType":"72","endLine":15,"endColumn":39},{"ruleId":"70","severity":1,"message":"71","line":36,"column":21,"nodeType":"72","endLine":36,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":41,"column":21,"nodeType":"72","endLine":41,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":60,"column":21,"nodeType":"72","endLine":60,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":65,"column":21,"nodeType":"72","endLine":65,"endColumn":45},{"ruleId":"73","severity":1,"message":"74","line":7,"column":9,"nodeType":"75","messageId":"76","endLine":7,"endColumn":17},{"ruleId":"73","severity":1,"message":"77","line":8,"column":11,"nodeType":"75","messageId":"76","endLine":8,"endColumn":15},{"ruleId":"73","severity":1,"message":"78","line":9,"column":10,"nodeType":"75","messageId":"76","endLine":9,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":43,"column":6,"nodeType":"81","endLine":43,"endColumn":41,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":1,"column":37,"nodeType":"75","messageId":"76","endLine":1,"endColumn":46},{"ruleId":"73","severity":1,"message":"84","line":11,"column":9,"nodeType":"75","messageId":"76","endLine":11,"endColumn":17},{"ruleId":"73","severity":1,"message":"85","line":7,"column":10,"nodeType":"75","messageId":"76","endLine":7,"endColumn":18},"no-new-object",["86"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'navigate' is assigned a value but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location'. Either include it or remove the dependency array.","ArrayExpression",["87"],"'useEffect' is defined but never used.","'location' is assigned a value but never used.","'contacts' is assigned a value but never used.","no-object-constructor",{"desc":"88","fix":"89"},"Update the dependencies array to be: [location.state, isNewContactAdded, location]",{"range":"90","text":"91"},[1406,1441],"[location.state, isNewContactAdded, location]"]